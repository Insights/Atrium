<?php

include_once('trees_dashboard.features.inc');

/**
 * Implementation of hook_help().
 */
function trees_dashboard_help($path, $arg) {
  if ($path == 'help#trees_dashboard' || context_get('spaces', 'feature') == 'dashboard' || context_get('spaces', 'dashboard') == 'overview') {
    switch ($path) {
      case 'help#trees_dashboard':
      default:
        $space = spaces_get_space();
        $map = _trees_dashboard_type_map();
        if ($space->admin_access()) {
          $path = "{$map[$space->type]}/customize";
          $customize_link = l(t('customize'), "{$map[$space->type]}/customize", array('query' => 'destination='. $_GET['q']));
        }

        $help = '';
        $help .= '<h3>'. t('Trees Dashboard') .'</h3>';
        $help .= '<p>'. t('The dashboard provides displays of the latest activity in your groups.') .'</p>';
        $help .= '<ul>';
        if (!empty($customize_link)) {
          $help .= '<li>'. t('You can !customize the layout of displays in <strong>the main view</strong>.', array('!customize' => $customize_link)) .'</li>';
        }
        $help .= '<li>'. t('<strong>My threads</strong> shows you posts that you are subscribed to.') .'</li>';
        $help .= '<li>'. t('<strong>All activity</strong> shows you all posts that you may view.') .'</li>';
        $help .= '<li>'. t('<strong>Files</strong> shows you any files that have been attached to new posts.') .'</li>';
        $help .= '</ul>';
        return $help;
    }
  }
}

/**
 * Implementation of hook_menu().
 */
function trees_dashboard_menu() {
  // Dashboard pages
  $items = array();
  $items['home'] =
  $items['profile'] =
  $items['dashboard'] =
  $items['home/view'] =
  $items['profile/view'] =
  $items['dashboard/view'] = array(
    'page callback' => 'trees_dashboard_dashboard',
    'page arguments' => array(),
    'access callback' => 'trees_dashboard_feature_access',
    'access arguments' => array('view'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -20,
  );

  $items['home/customize'] =
  $items['profile/customize'] =
  $items['dashboard/customize'] = array(
    'title' => 'Customize',
    'page callback' => 'trees_dashboard_customize',
    'page arguments' => array(),
    'access callback' => 'trees_dashboard_feature_access',
    'access arguments' => array('customize'),
    'type' => MENU_CALLBACK,
    'weight' => 20,
  );

  // Local tasks
  $items['home/view']['type'] =
  $items['profile/view']['type'] =
  $items['dashboard/view']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $items['home/view']['title'] =
  $items['profile/view']['title'] =
  $items['dashboard/view']['title'] = 'View';

  // Menu items
  $items['home']['title'] = 'Home';
  $items['home']['access arguments'] =
  $items['home/view']['access arguments'] = array('view', 'site');
  $items['home/customize']['access arguments'] = array('customize', 'site');

  $items['profile']['title'] = 'Profile';
  $items['profile']['access arguments'] =
  $items['profile/view']['access arguments'] = array('view', 'user');
  $items['profile/customize']['access arguments'] = array('customize', 'user');

  $items['dashboard']['title'] = 'Dashboard';
  $items['dashboard']['access arguments'] =
  $items['dashboard/view']['access arguments'] = array('view', 'og');
  $items['dashboard/customize']['access arguments'] = array('customize', 'og');

  return $items;
}

/**
 * Menu access callback for dashboard pages.
 */
function trees_dashboard_feature_access($op = 'view', $space_type) {
  $space = spaces_get_space();
  if (user_access('access content') && $space && $space->type == $space_type) {
    switch ($op) {
      case 'view':
        return spaces_feature_access('trees_dashboard');
      case 'customize':
        return $space->admin_access() && spaces_feature_access('trees_dashboard');
    }
  }
  return FALSE;
}

/**
 * Implementation of hook_menu_alter().
 */
function trees_dashboard_menu_alter(&$items) {
  $view = views_get_view('trees_dashboard');
  if ($view) {
    foreach ($view->display as $display_id => $info) {
      if ($info->display_plugin == 'page') {
        $result = $view->execute_hook_menu($display_id);
        if (is_array($result)) {
          foreach ($result as $path => $item) {
            $clones = array('home', 'profile');
            foreach ($clones as $clone_path) {
              $replaced = str_replace('dashboard', $clone_path, $path);
              $items[$replaced] = $item;
            }
          }
        }
      }
    }
  }
}

/**
 * Empty page callback for dashboard feature.
 */
function trees_dashboard_dashboard() {
  context_set('spaces', 'dashboard', 'overview');
  return '';
}

/**
 * Dashboard customize callback.
 */
function trees_dashboard_customize() {
  $space = spaces_get_space();

  $map = _trees_dashboard_type_map();
  if (isset($map[$space->type])) {
    menu_set_active_item($map[$space->type]);
  }

  module_load_include('inc', 'spaces', 'spaces_admin');
  return drupal_get_form('spaces_customize_form', NULL, 'trees_dashboard');
}

/**
 * Implementation of hook_context_active_contexts_alter().
 */
function trees_dashboard_context_active_contexts_alter(&$contexts) {
  $space = spaces_get_space();

  if (!empty($contexts['spaces-feature-dashboard'])) {
    // Swap out active menu reaction
    $map = _trees_dashboard_type_map();
    if ($space && isset($map[$space->type])) {
      $contexts['spaces-feature-dashboard']->menu = $map[$space->type];
    }
    // Yank my groups block from dashboard views
    if ($space->type == 'site') {
      if (!empty($contexts['spaces-feature-dashboard'])) {
        $contexts['spaces-feature-dashboard']->block['views_trees_groups-block_2'] = array(
          'module' => 'views',
          'delta' => 'trees_groups-block_2',
          'region' => 'right',
          'weight' => '10',
        );
      }
    }
  }

  // Add the profile block to user dashboards
  if (!empty($contexts['spaces-dashboard-overview'])) {
    if ($space && $space->type == 'user') {
      $contexts['spaces-dashboard-overview']->block['views-trees_profile-block_1'] = array(
        'module' => 'views',
        'delta' => 'trees_profile-block_1',
        'region' => 'content',
        'weight' => -20,
      );
    }
  }
}

/**
 * Implementation of hook_context_links_alter().
 */
function trees_dashboard_context_links_alter(&$links) {
  if (context_isset('spaces', 'dashboard', 'overview')) {
    $space = spaces_get_space();
    $map = _trees_dashboard_type_map();
    if ($space->admin_access()) {
      $path = "{$map[$space->type]}/customize";
      $links["trees_dashboard"] = array(
        'title' => t('Customize layout'),
        'href' => $path,
        'query' => 'destination='. $_GET['q'],
        'custom' => TRUE,
      );
    }
  }
}

/**
 * Implementation of hook_trees_user_links_alter().
 */
function trees_dashboard_trees_user_links_alter(&$links) {
  $links['home'] = array(
    'title' => t('Home'),
    'href' => 'home',
    'purl' => array('disabled' => TRUE),
    '#weight' => -10,
  );
}

/**
 * Return an array of space types to dashboard paths
 */
function _trees_dashboard_type_map() {
  return array(
    'og' => 'dashboard',
    'user' => 'profile',
    'site' => 'home',
  );
}
