<?php

include_once('atrium_intranet.features.inc');

/**
 * Implementation of hook_strongarm().
 */
function atrium_intranet_strongarm() {
  $conf = array();

  // @TODO: See if there are any serious consequences if this is not set
  // during a cache-clear page load...
  $conf['og_content_type_usage_group'] = 'group';

  // ImageAPI
  $conf['imageapi_jpeg_quality'] = 90;

  // Date formats
  $conf['date_format_short'] = 'M j, Y';
  $conf['date_format_medium'] = 'g:ia M j, Y';
  $conf['date_format_long'] = 'g:ia D M j, Y';
  $conf['date_format_field_date_short'] = 'M j, Y';
  $conf['date_format_field_date_medium'] = 'g:ia M j, Y';
  $conf['date_format_field_date_long'] = 'g:ia D M j, Y';

  // Notifications
  $conf['notifications_content_per_type'] = 1;
  $conf['messaging_default_method'] = 'mail';

  // Nodetype settings
  foreach (array('group', 'admin_message') as $type) {
    $conf['node_options_'. $type] = array('status');
    $conf["notifications_content_type_$type"] = array();
    $conf['upload_'. $type] = FALSE;

    // Disable comments
    $conf['comment_'. $type] = COMMENT_NODE_DISABLED;

    // Disable FeedAPI
    $conf['feedapi_settings_'. $type] = array('enabled' => FALSE);

    // Disable Diff button
    $conf["show_preview_changes_{$type}"] = FALSE;
    $conf["show_diff_inline_{$type}"] = FALSE;

    // Disable from recent activity views
    $conf['atrium_update_type_'. $type] = FALSE;
  }

  // Atrium archivable types
  $conf['atrium_archivable'] = array('group');

  // Menus
  $conf['menu_primary_links_source'] = 'features';

  // Seed variables
  $conf['seed_imagecache_user_picture'] = 'user-s';
  $conf['seed_imagecache_attachment'] = 'fileview';

  // Site variables
  $conf['site_frontpage'] = 'welcome';

  // FeedAPI
  $conf['feedapi_cron_percentage'] = '25';
  $conf['feedapi_allow_html_all'] = FALSE;
  $conf['feedapi_allowed_html_tags'] = '<div> <h1> <h2> <h3> <h4> <h5> <h6> <img> <a> <b> <br> <dd> <dl> <dt> <em> <i> <li> <ol> <p> <strong> <u> <ul>';

  // Views
  $conf['views_no_hover_links'] = TRUE;

  // Views: disable views that we are 'overriding'
  $views_defaults = variable_get('views_defaults', array());
  $disabled = array(
    'admin_content',
    'feeds',
    'og',
    'og_my',
    'og_files',
    'og_ghp_ron',
    'og_mytracker',
    'og_members_block',
    'og_search',
    'og_tracker',
    'og_recent_type_term',
    'og_unread',
  );
  $set = FALSE;
  foreach ($disabled as $view_name) {
    if (empty($views_defaults[$view_name])) {
      $set = TRUE;
      $views_defaults[$view_name] = TRUE;
    }
  }
  if ($set) {
    variable_set('views_defaults', $views_defaults);
  }

  // Upload settings
  // @TODO should we query for the RIDs here? : (
  $conf['upload_extensions_2'] =
  $conf['upload_extensions_3'] =
  $conf['upload_extensions_4'] =
  $conf['upload_extensions_default'] = 'au avi bzip2 csv doc docx flv gif graffle gz htm html iso jpeg jpg mov mp2 mp3 mp4 odp ods odt pages patch pdf png pps ppt pptx psd rar svg swf template tif tgz txt vsd wav wmv xls xlsx zip';

  $conf['upload_uploadsize_2'] =
  $conf['upload_uploadsize_3'] =
  $conf['upload_uploadsize_4'] =
  $conf['upload_uploadsize_default'] = 20;

  $conf['upload_usersize_2'] =
  $conf['upload_usersize_default'] = 200;

  $conf['upload_usersize_3'] =
  $conf['upload_usersize_4'] = 500;

  $conf['upload_list_default'] = 1;

  // Do not switch to autocomplete until you have more than 200 users.
  $conf['notifications_team_max_options'] = 200;

  // Allowed HTML & default filter format settings
  $format = db_result(db_query("SELECT format FROM {filter_formats} WHERE name = '%s'", 'Markdown'));
  if ($format) {
    $conf["allowed_html_{$format}"] = '<div> <span> <br> <a> <em> <strong> <cite> <code> <strike> <ul> <ol> <li> <dl> <dt> <dd> <img> <blockquote> <p> <h1> <h2> <h3> <h4> <h5> <h6> <table> <caption> <thead> <th> <td> <tr>';
    $conf['filter_default_format'] = $format;
  }

  // Messaging Mail input filter
  $potential_formats = array();
  $result = db_query("SELECT ff.format, ff.name FROM {filter_formats} ff JOIN {filters} f ON ff.format = f.format WHERE f.module = '%s' AND f.delta = %d", 'messaging', 1);
  while ($row = db_fetch_object($result)) {
    $potential_formats[$row->format] = $row->name;
  }
  if (!empty($potential_formats)) {
    // For now use the first format
    $formats = array_keys($potential_formats);
    $conf['messaging_method_mail'] = array('filter' => $formats[0]);
  }

  return $conf;
}

/**
 * Implementation of hook_init().
 */
function atrium_intranet_init() {
  // Display a login message
  if (!user_access('access content') && !in_array(arg(0), array('user', 'openid')) && !drupal_is_front_page()) {
    drupal_set_message(l('Click here to login', 'user', array('query' => 'destination='.$_GET['q'])));
  }
}

/**
 * Implementation of hook_views_api().
 */
function atrium_intranet_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_menu_alter().
 */
function atrium_intranet_menu_alter(&$items) {
  // Kill undesirable menu items
  $yank = array(
    'book',
    'rss.xml',
    'og/activity',
    'node/%node/outline',
  );
  foreach ($yank as $path) {
    if (!empty($items[$path])) {
      unset($items[$path]);
    }
  }

  $dummy = array();
  $categories = module_invoke('atrium_intranet', 'user', 'categories', $dummy, $dummy);

  foreach ($categories as $category) {
    $item = $items['user/%user_category/edit/'. $category['name']];
    $item['page callback'] = 'drupal_get_form';
    $item['page arguments'] = array('atrium_intranet_user_profile_tab', 1, $category['name']);
    $items['user/%user_category/edit/'. $category['name']] = $item;
  }
}

/**
 * Implementation of hook_context_links_alter().
 */
function atrium_intranet_context_links_alter(&$links) {
  $feature = context_get('spaces', 'feature');
  switch ($feature) {
    case 'groups':
      if (node_access('create', 'group')) {
        $links['atrium_groups'] = array(
          'title' => t('Group'),
          'href' => 'node/add/group',
        );
      }
      break;
    case 'members':
      if (module_exists('ucreate') && user_access('create users')) {
        $links['atrium_users'] = array(
          'title' => t('User account'),
          'href' => 'user/add',
        );
      }
      break;
  }
}

/**
 * Implementation of hook_imagecache_default_presets_alter().
 */
function atrium_intranet_imagecache_default_presets_alter(&$presets) {
  if (!empty($presets['spaces-logo'])) {
    if (!empty($presets['spaces-logo']['actions'][0]['data']['height'])) {
      $presets['spaces-logo']['actions'][0]['data']['height'] = 40;
    }
  }
}

/**
 * Implementation of hook_spaces_presets().
 */
function atrium_intranet_spaces_presets() {
  $items = array();
  $items['atrium_og_private'] = array (
    'name' => 'Private group',
    'description' => t('A simple private group with a blog, document library and dashboard.'),
    'type' => 'og',
    'preset' => array (
      'features' => array (
        'atrium_blog' => SPACES_OG_PRIVATE,
        'atrium_book' => SPACES_OG_PRIVATE,
        'atrium_calendar' => SPACES_FEATURE_DISABLED,
        'atrium_dashboard' => SPACES_OG_PRIVATE,
      ),
      'settings' => array (
        'home' => 'dashboard',
      ),
      'og' => array(
        'og_selective' => OG_CLOSED,
        'og_directory' => OG_DIRECTORY_NEVER,
        'og_register' => OG_REGISTRATION_ALWAYS,
        'og_private' => defined(OG_PRIVATE_GROUPS_ALWAYS) ? OG_PRIVATE_GROUPS_ALWAYS : 1,
      ),
    ),
  );
  $items['atrium_og_public'] = array (
    'name' => 'Public group',
    'description' => t('A simple public group with a blog, document library and dashboard.'),
    'type' => 'og',
    'preset' => array (
      'features' => array (
        'atrium_blog' => SPACES_OG_PUBLIC,
        'atrium_book' => SPACES_OG_PUBLIC,
        'atrium_calendar' => SPACES_FEATURE_DISABLED,
        'atrium_dashboard' => SPACES_OG_PUBLIC,
      ),
      'settings' => array (
        'home' => 'dashboard',
      ),
      'og' => array(
        'og_selective' => OG_OPEN,
        'og_directory' => OG_DIRECTORY_ALWAYS,
        'og_register' => OG_REGISTRATION_ALWAYS,
        'og_private' => defined(OG_PRIVATE_GROUPS_NEVER) ? OG_PRIVATE_GROUPS_NEVER : 0,
      ),
    ),
  );
  $items['atrium_user_simple'] = array (
    'name' => 'Simple profile',
    'description' => t('A simple profile with a blog, calendar and dashboard.'),
    'type' => 'user',
    'preset' => array (
      'features' => array (
        'atrium_blog' => '1',
        'atrium_book' => '0',
        'atrium_calendar' => '1',
        'atrium_dashboard' => '1',
      ),
      'settings' => array (
        'home' => 'profile',
      ),
      'locked' => array (
        'features' => array (
          'atrium_blog' => 1,
          'atrium_book' => 0,
          'atrium_calendar' => 1,
          'atrium_dashboard' => 1,
        ),
        'settings' => array (
          'home' => 1,
        ),
      ),
      'user' => array (),
    ),
  );
  $items['atrium_intranet'] = array (
    'name' => 'Basic intranet',
    'description' => t('A basic intranet hub setup.'),
    'type' => 'site',
    'preset' => array (
      'features' => array (
        'atrium_intranet' => 1,
        'atrium_dashboard' => 1,
      ),
      'settings' => array (
        'home' => 'home',
      ),
      'locked' => array (
        'features' => array (
          'atrium_intranet' => 1,
          'atrium_dashboard' => 1,
        ),
        'settings' => array (
          'home' => 0,
        ),
      ),
    ),
  );
  return $items;
}

/**
 * Implementation of hook_link_alter().
 */
function atrium_intranet_link_alter(&$links, $node) {
  if (!empty($links['comment_new_comments']) && !empty($links['comment_comments'])) {
    unset($links['comment_comments']);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function atrium_intranet_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'view':
      // Load the node's read state.
      if (!isset($node->new)) {
        global $user;
        $readtime = db_result(db_query("SELECT timestamp FROM {history} WHERE uid = %d AND nid = %d", $user->uid, $node->nid));
        $node->new = atrium_intranet_get_readstate($readtime, $node->changed);
      }
      break;
  }
}

/**
 * Implementation of hook_litenode().
 */
function atrium_intranet_litenode() {
  $info = array();
  $info['atrium'] = array();
  $info['atrium']['module'] = t('Atrium');
  $info['atrium']['map'] = array();
  $info['atrium']['fields'] = array(
    'timestamp_1' => array(
      'id' => 'timestamp_1',
      'table' => 'history_user',
      'field' => 'timestamp',
    ),
  );
  return $info;
}

/**
 * Implementation of hook_litenode_alter().
 */
function atrium_intranet_litenode_alter(&$node, $row) {
  $node->new = atrium_intranet_get_readstate($row->history_user_timestamp, $node->changed);
}

/**
 * Helper function to deal with node read state logic.
 */
function atrium_intranet_get_readstate($readtime, $nodetime) {
  if ($readtime == 0 && $nodetime > NODE_NEW_LIMIT) {
    return MARK_NEW;
  }
  elseif ($nodetime > $readtime && $nodetime > NODE_NEW_LIMIT) {
    return MARK_UPDATED;
  }
  return MARK_READ;
}

/**
 * Implementation of hook_form_alter().
 */
function atrium_intranet_form_alter(&$form, &$form_state, $form_id) {
  // Disable notifications when editing a post outside of a group space
  if ((!empty($form['#node']) || $form_id == 'comment_form') && isset($form['notifications'])) {
    $space = spaces_get_space();
    if (empty($space) || $space->type != 'og') {
      $form['notifications']['#access'] = FALSE;
    }
  }

  // Node form customizations/niceties
  if ($form['#id'] == 'node-form') {
    // Even if you have the perms, we don't want you messing with this stuff
    $node = $form['#node'];
    $disable = array('menu', 'comment_settings');

    if (!book_type_is_allowed($node->type)) {
      $disable[] = 'book';
    }

    $node_options = variable_get('node_options_'. $node->type, array('status', 'promote'));
    if (!in_array('revision', $node_options)) {
      $disable[] = 'revision_information';
    }

    foreach ($disable as $key) {
      if (!empty($form[$key])) {
        $form[$key]['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implementation of hook_form_alter() for user_login.
 */
function atrium_intranet_form_user_login_alter(&$form) {
  // If user has no destination set or user/login (a bad one), send to homepage post login.
  // See user module login block for the use of [#action] to force a redirect.
  $dest = isset($_GET['destination']) ? $_GET['destination'] : '';
  if (!$dest || $dest == 'user/login') {
    $path = variable_get('site_frontpage', 'node');
    $form['#action'] = url($_GET['q'], array('query' => 'destination='. $path));
  }
}

/**
 * Implementation of hook_form_alter() for comment_form.
 */
function atrium_intranet_form_comment_form_alter(&$form) {
  if (!drupal_get_title()) drupal_set_title(t('Reply'));
  // Shrink comment field -- people don't have much to say usually
  $form['comment_filter']['comment']['#rows'] = 8;
}

/**
 * Implementation of hook_form_alter() for user_profile_form.
 */
function atrium_intranet_form_user_profile_form_alter(&$form) {
  $dummy = array();
  $categories = module_invoke('atrium_intranet', 'user', 'categories', $dummy, $dummy);
  foreach ($categories as $info) {
    if (!empty($form[$info['name']])) {
      $form[$info['name']]['#access'] = FALSE;
    }
  }
  $form['comment_settings']['#type'] = 'hidden';
}

/**
 * Implementation of hook_spaces_settings().
 */
function atrium_intranet_spaces_settings() {
  return array(
    'atrium_members' => array(
      'class' => 'atrium_intranet_setting_members',
      'file' => drupal_get_path('module', 'atrium_intranet') .'/atrium_intranet.spaces.inc',
    ),
  );
}

/**
 * Implementation of hook_views_pre_view().
 */
function atrium_intranet_views_pre_view(&$view) {
  switch ($view->name) {
    case 'atrium_members':
      // The page_3 display corresponds to the member directory.
      if ($view->current_display == 'page_3') {
        $space = spaces_get_space();
        if (!empty($space->settings['atrium_members'])) {
          $filters = $view->display_handler->get_option('filters');
          if (!empty($filters['uid_1'])) {
            $filters['uid_1']['value'] = 1;
            $view->display_handler->set_option('filters', $filters);
          }
        }
      }
      break;
  }
}

/**
 * Implementation of hook_user().
 */
function atrium_intranet_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'categories':
      $categories = array();
      // Check that user pictures are enabled.
      if (variable_get('user_pictures', 0)) {
        $categories['picture'] = array(
          'name' => 'picture',
          'title' => 'Picture',
          'weight' => 10,
        );
      }
      // Check that user can select a theme and that there are options for her to select from.
      if (user_access('select different theme')) {
        $enabled = array();
        foreach (list_themes() as $theme) {
          if ($theme->status && !empty($theme->info['atrium'])) {
            $enabled[] = $theme;
          }
        }
        if (count($enabled) > 1) {
          $categories['theme_select'] = array(
            'name' => 'theme_select',
            'title' => 'Theme settings',
            'weight' => 10,
          );
        }
      }
      return $categories;
  }
}

/**
 * Form callback that generates only the portion of the user profile form that is requested.
 */
function atrium_intranet_user_profile_tab($form_state, $account, $tab) {
  module_load_include('inc', 'user', 'user.pages');
  $form = user_profile_form($form_state, $account);
  $form['#submit'] = array('user_profile_form_submit');
  foreach (element_children($form) as $k) {
    if ($k == $tab || $form[$k]['#type'] == 'submit') {
      $form[$k]['#access'] = TRUE;
    }
    else {
      $form[$k]['#access'] = FALSE;
    }
  }
  if (isset($form['delete'])) {
    $form['delete']['#access'] = FALSE;
  }
  return $form;
}
