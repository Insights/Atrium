<?php
// *Id*
/**
 * @file
 *   Download remote translations from server
 *   
 * @todo Implement updates on cron
 * @todo Fetch information from info files
 */

/**
 * Implementation of hook_menu().
 */
function l10n_update_menu() {
  $items['admin/build/translate/update'] = array(
    'title' => 'Update',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('l10n_update_import_form'),
    'access arguments' => array('translate interface'),
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Update form
 * 
 * @todo selectable packages
 * @todo check language support in server
 * @todo check file update dates
 */
function l10n_update_import_form() {
  module_load_include('inc', 'l10n_update');
  // For now we get package information provided by modules
  $projects = l10n_update_get_projects();
  $languages = l10n_update_language_list('name');  

  if ($projects && $languages) {
    $history = l10n_update_refresh_history();
    $available = l10n_update_available_releases();
    $updates = _l10n_update_compare($projects, $history, $available);
    
    $form['updates'] = array('#type' => 'value', '#value' => $updates);
    $form['modules'] = array(
      '#title' => t('Packages'),
      '#type' => 'fieldset',
    );
    $header = array(t('Module'), t('Current version'), t('Available update'), '');
    foreach ($projects as $name => $project) {
      $title = t('<strong>%name</strong> (%version)', array('%name' => $project['name'], '%version' => $project['info']['version']));
      $rows[] = array(
        array('data' => $title, 'colspan' => 4),
      );
      foreach ($languages as $lang => $language) {
        $current = isset($history[$name]->updates[$lang]) ? $history[$name]->updates[$lang] : NULL;
        $update = isset($updates[$name][$lang]) ? $updates[$name][$lang] : NULL;
        $rows[] = array(
          $language,
          $current ? l10n_update_tag_date($current->download_version, $current->download_date) : '',
          $update ? l10n_update_tag_date($update['tag'], $update['date']) : '',          
          $update ? l(t('Download'), $update['download_link']) : '',
        ); 
      }
    }
    $form['modules']['modules'] = array('#value' => theme('table', $header, $rows));
    
    $form['languages'] = array(
      '#title' => t('Languages'),
      '#type' => 'checkboxes',
      '#options' => $languages,
      '#description' => t('Select one or more languages to download and update.'),
    );
    $form['mode'] = array('#type' => 'radios',
      '#title' => t('Mode'),
      '#default_value' => LOCALE_IMPORT_KEEP,
      '#options' => array(
        LOCALE_IMPORT_OVERWRITE => t('Strings in the uploaded file replace existing ones, new ones are added'),
        LOCALE_IMPORT_KEEP => t('Existing strings are kept, only new strings are added')
      ),
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Update'),
    );
  } else {
    $form['warning'] = array('#value' => t('No projects or languages to update.'));
  }
  return $form;
}

/**
 * Update form
 */
function l10n_update_import_form_submit($form, $form_state) {
  module_load_include('inc', 'l10n_update');
  $projects = l10n_update_get_projects();
  $languages = array_filter($form_state['values']['languages']);
  $updates = $form_state['values']['updates'];
  $mode = $form_state['values']['mode'];
  
  if ($languages && $projects && $updates) {
    foreach ($projects as $project) {
      foreach ($languages as $lang) {
        if (!empty($updates[$project['name']][$lang])) {
          $release = $updates[$project['name']][$lang];
          $operations[] = array('_l10n_update_batch_download_import', array($release['download_link'], $lang));
          $operations[] = array('_l10n_update_batch_history', array($project, $release));
        }
      }
    }
    if (!empty($operations)) {
      $batch = l10n_update_create_batch($operations);
      batch_set($batch);
    }
  }
  else {
    drupal_set_message(t('No packages or languages selected.'), 'error');
  }
}

/**
 * Fetch update information for all projects / all languages
 * 
 * @return array()
 *   Available releases indexed by project and language
 */
function l10n_update_available_releases($refresh = FALSE) {  
  if (!$refresh && ($cache = cache_get('l10n_update_available_releases'))) {
    return $cache->data;
  }
  else {
    module_load_include('inc', 'l10n_update');
    return _l10n_update_refresh();
  }
}

/**
 * Get list of projects
 * 
 * Atm, this is provided by modules implementing the l10n_update hook.
 * But in the future we might be able to fetch it from install files.
 */
function l10n_update_get_projects() {
  static $projects;  
  if (!isset($projects)) {
    $projects = module_invoke_all('l10n_update');
  }
  return $projects;
}

/**
 * Get update history
 * 
 * Returns an array indexed by project name
 * For each project there are updates indexed by language
 */
function l10n_update_get_history($refresh = FALSE) {
  static $status;
  
  if ($refresh ||!isset($status)) {
    $status = array();
    $result = db_query("SELECT * FROM {l10n_update_project}");
    while ($project = db_fetch_object($result)) {
      $status[$project->name] = $project;
    }
    $result = db_query("SELECT * FROM {l10n_update_download}");
    while ($update = db_fetch_object($result)) {
      $status[$update->project]->updates[$update->language] = $update;
    }
  }
  
  return $status;
}

/**
 * Refresh project information
 */
function l10n_update_refresh_history() {
  $projects = l10n_update_get_projects();
  $updates = l10n_update_get_history();
  
  $changes = 0;
  foreach ($projects as &$project) {
    $name = $project['name'];
    if (empty($updates[$name])) {
      // Project is not there, create it
      $save = array('name' => $name, 'version' => $project['info']['version']);
      drupal_write_record('l10n_update_project', $save);
      $changes++;     
    }
    elseif ($updates[$name]->version != $project['info']['version']) {
      // Update project version
      $updates[$name]->version = $project['info']['version'];
      drupal_write_record('l10n_update_project', $updates[$name], 'name');
      $changes++;
    }
  }
  // If any change it will be refreshed
  return l10n_update_get_history($changes);
}

/**
 * Get language list
 */
function l10n_update_language_list($field = 'name') {
  $languages = locale_language_list('name');
  // Skip English language
  if (isset($languages['en'])) {
    unset($languages['en']);
  }
  return $languages;
}

/**
 * Format tag and release date
 * @param $tag
 * @param $date
 * @return unknown_type
 */
function l10n_update_tag_date($tag, $date) {
  return '<strong>' . check_plain($tag) . '</strong> (' . format_date($date, 'short') . ')';
}
